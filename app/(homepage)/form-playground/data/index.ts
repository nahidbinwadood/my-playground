import BasicValidationForm from '../_components/all-forms/basic-validation-form/basic-validation-form';
import { IChallenge } from '../types';

export const challenges: IChallenge[] = [
  {
    id: 'basic-validation',
    title: 'Basic Validation Form',
    difficulty: 'Easy',
    description: 'Start with a basic form validating required fields.',
    requirements: [
      'Create a form with Name , Email and Password fields',
      'Both fields are required',
      'Show error messages if fields are empty',
      'Email must be in a valid format',
      'Show error message for invalid email',
      'Add password input field with visibility toggle',
      'Use eye icon for show/hide',
      'Password field should be required',
      'Password should contain at least 8 characters long',
      'Password should contain at least 1 uppercase letter',
      'Password should contain at least 1 lowercase letter',
      'Password should contain at least 1 number',
      'Password should contain at least 1 special character',
    ],
    component: BasicValidationForm,
    completed: true,
  },

  {
    id: 'form-with-select',
    title: 'Form with Select Input',
    difficulty: 'Easy',
    description: 'Add select dropdown and validate selected value.',
    requirements: [
      'Create a form with Name, Email, and Account Type select',
      'Account Type must be selected before submitting',
      'Reset form after submission',
    ],
    // component: FormWithSelect,
    completed: false,
  },
  {
    id: 'dependent-dropdown',
    title: 'Dependent Dropdowns',
    difficulty: 'Medium',
    description: 'Learn how to update one field based on another.',
    requirements: [
      'Create two selects: Country and City',
      'Cities should change based on selected Country',
      'Both fields required',
    ],
    // component: DependentDropdownForm,
    completed: false,
  },
  {
    id: 'conditional-validation',
    title: 'Conditional Field Validation',
    difficulty: 'Medium',
    description:
      'Some fields become required based on the value of other fields.',
    requirements: [
      '5 fields: Name, Email, Account Type (select), Company Name, and Phone',
      'If Account Type is "Business", Company Name becomes required',
      'If Account Type is "Personal", Phone becomes required',
      'Email must be valid format',
      'Show appropriate error messages for each field',
    ],
    // component: ConditionalValidationForm,
    completed: false,
  },
  {
    id: 'multi-field-validation',
    title: 'Multiple Field Rules',
    difficulty: 'Medium',
    description:
      'Validate multiple fields together and display combined errors.',
    requirements: [
      'Create form with Email and Confirm Email fields',
      'Both must match before submit',
      'Show combined error if mismatch',
    ],
    // component: MultiFieldValidationForm,
    completed: false,
  },
  {
    id: 'dynamic-fields',
    title: 'Dynamic Form Fields',
    difficulty: 'Hard',
    description: 'Add/remove dynamic groups of fields — core of field arrays.',
    requirements: [
      'Allow users to add/remove multiple address entries',
      'Each address should have: Street, City, State, Zip Code',
      'Validate all fields in each address group',
      'Minimum 1 address required, maximum 5 addresses',
    ],
    // component: DynamicFieldsForm,
    completed: false,
  },
  {
    id: 'field-array',
    title: 'Field Array with Nested Objects',
    difficulty: 'Hard',
    description: 'Deepen your mastery of React Hook Form’s field arrays.',
    requirements: [
      'Build form with multiple "contacts"',
      'Each contact has: Name, Email, and Phones (array)',
      'Phones are dynamic per contact',
      'Validate all levels properly',
    ],
    // component: FieldArrayForm,
    completed: false,
  },
  {
    id: 'nested-form',
    title: 'Nested Form Handling',
    difficulty: 'Medium',
    description: 'Handle deeply nested form structures with RHF.',
    requirements: [
      'Form with user -> address -> coordinates structure',
      'Each nested object validated properly',
      'Use dot notation (user.address.street)',
    ],
    // component: NestedFormForm,
    completed: false,
  },
  {
    id: 'async-validation',
    title: 'Async Field Validation',
    difficulty: 'Hard',
    description: 'Check field availability with simulated API calls.',
    requirements: [
      'Username field with async validation',
      'Show loading spinner during check',
      'Debounce input by 500ms',
      'Display “Available” or “Taken” message',
    ],
    // component: AsyncValidationForm,
    completed: false,
  },
  {
    id: 'debounced-validation',
    title: 'Debounced Form Validation',
    difficulty: 'Medium',
    description: 'Add debouncing to prevent excessive validation calls.',
    requirements: [
      'Use debounce logic for email validation',
      'Show loading spinner only after delay',
    ],
    // component: DebouncedValidationForm,
    completed: false,
  },
  {
    id: 'cross-field-validation',
    title: 'Cross-Field Validation',
    difficulty: 'Medium',
    description: 'Validate relationships between multiple fields.',
    requirements: [
      'Form with start date and end date',
      'End date cannot be before start date',
      'Show custom error for invalid range',
    ],
    // component: CrossFieldValidationForm,
    completed: false,
  },
  {
    id: 'password-strength',
    title: 'Password Strength Indicator',
    difficulty: 'Medium',
    description: 'Build password strength meter and custom rules.',
    requirements: [
      'Password must include uppercase, lowercase, number, symbol',
      'Show strength indicator (Weak / Medium / Strong)',
      'Display which rules are satisfied',
    ],
    // component: PasswordStrengthForm,
    completed: false,
  },
  {
    id: 'multi-step-form',
    title: 'Multi-Step Form with Validation',
    difficulty: 'Hard',
    description: 'Multi-step form with validation per step.',
    requirements: [
      'Create 3 steps: Personal Info, Address, Review',
      'Each step validated before proceeding',
      'Maintain state across steps',
      'Allow back navigation',
    ],
    // component: MultiStepForm,
    completed: false,
  },
  {
    id: 'file-upload',
    title: 'File Upload Validation',
    difficulty: 'Medium',
    description: 'Handle file upload and validation (size/type).',
    requirements: [
      'Accept only images (png, jpg)',
      'Limit file size to 2MB',
      'Preview selected image',
      'Show validation messages',
    ],
    // component: FileUploadForm,
    completed: false,
  },
  {
    id: 'form-with-context',
    title: 'Form Context Reuse',
    difficulty: 'Medium',
    description: 'Use FormProvider to share state between components.',
    requirements: [
      'Split form into sub-components',
      'Use RHF FormProvider + useFormContext',
      'All fields should still validate correctly',
    ],
    // component: FormWithContextForm,
    completed: false,
  },
  {
    id: 'form-persist',
    title: 'Form Persistence (Local Storage)',
    difficulty: 'Hard',
    description: 'Persist form data using localStorage or IndexedDB.',
    requirements: [
      'Save form state to localStorage on change',
      'Restore form state on reload',
      'Clear state on successful submission',
    ],
    // component: FormPersistForm,
    completed: false,
  },
  {
    id: 'controlled-uncontrolled-mix',
    title: 'Controlled vs Uncontrolled Components',
    difficulty: 'Medium',
    description:
      'Learn to mix controlled and uncontrolled inputs safely in RHF.',
    requirements: [
      'Use one controlled and one uncontrolled input',
      'Ensure RHF handles both correctly',
      'Understand when to use Controller',
    ],
    // component: ControlledUncontrolledMixForm,
    completed: false,
  },
  {
    id: 'form-performance-optimization',
    title: 'Form Performance Optimization',
    difficulty: 'Hard',
    description: 'Optimize re-renders and field subscriptions in large forms.',
    requirements: [
      'Measure re-renders using React dev tools',
      'Use useWatch and useController properly',
      'Memoize field components for performance',
      'Prevent unnecessary re-renders',
    ],
    // component: FormPerformanceOptimizationForm,
    completed: false,
  },
];
